!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).seqjaz=t()}(this,(function(){"use strict";function e(e){return null!==e}function t(t){return e(t)&&"GeneratorFunction"===t[Symbol.toStringTag]}function n(t){return e(t)&&void 0!==t[Symbol.iterator]}function r(e){return e&&"number"==typeof e.length&&"function"!=typeof e}function i(e,t="value"){if(null==e)throw new TypeError(`${t} is null or not defined.`)}function o(e,t="value"){if(!function(e){return"function"==typeof e}(e))throw new TypeError(`${t} is not a function.`)}function u(e,t="value"){if(!Number.isFinite(e)||e<0)throw new TypeError(`${t} must be a non-negative number.`)}function l(e,n="value"){if(t(e))throw TypeError(`${n} is a generator function. It should be a normal function.`)}class c{constructor(e=function*(){}){if(this._source=e,t(this._source))this._generator=this._source;else{if(!n(this._source)&&!r(e))throw new TypeError("source must be iterable.");this._generator=function(e){return n(e)?function*(){yield*e}:r(e)?function*(){for(let t=0;t<e.length;t+=1)yield e[t]}:function*(){}}(this._source)}}[Symbol.iterator](){return new c(this._generator())}next(){const e=this._generator().next();return e.done?{done:!0}:{value:e.value}}return(){return{done:!0}}get[Symbol.toStringTag](){return"Seq"}static get[Symbol.species](){return c}static init(e,t){return u(e,"count"),o(t,"initializer"),l(t,"initializer"),0===e?c.empty():new c((function*(){for(let n=0;n<e;n++)yield t(n)}))}static initInfinite(e){o(e,"initializer"),l(e,"initializer");let t=0;return new c((function*(){for(;t<Number.MAX_SAFE_INTEGER;)yield e(t++)}))}static repeat(e,t){return u(e,"count"),0===e?c.empty():new c((function*(){for(let n=0;n<e;n++)yield t}))}static isSeq(e){return"[object Seq]"===Object.prototype.toString.call(e)}get length(){if(Array.isArray(this._source))return this._source.length;let e=0;const t=this._generator();for(;!t.next().done;)e++;return e}isEmpty(){return i(this,"this"),this._generator().next().done}toArray(){return i(this,"this"),[...this._generator()]}forEach(e){i(this,"this"),o(e,"callback"),l(e,"callback");let t,n=0;arguments.length>1&&(t=arguments[1]);const r=this._generator();for(const i of r)e.call(t,i,n++)}filter(e){let t;i(this,"this"),o(e,"predicate"),l(e,"predicate"),arguments.length>1&&(t=arguments[1]);const n=this._generator();return new c((function*(){for(const r of n)e.call(t,r)&&(yield r)}))}reduce(e){let t;i(this,"this"),o(e,"reducer"),l(e,"reducer"),arguments.length>1&&(t=arguments[1]);const n=this._generator();let r,u=n.next();if(u.done){if(t)return t;throw new TypeError("Reduce of empty sequence with no initial value.")}for(r=t?e(t,u.value):u.value;!(u=n.next()).done;)r=e(r,u.value);return r}concat(e){let r;i(this,"this"),r=t(e)?e():n(e)?e[Symbol.iterator]():{*[Symbol.iterator](){yield e}};const o=this._generator();return new c((function*(){yield*o,yield*r}))}some(e){let t,n;i(this,"this"),o(e,"predicate"),l(e,"predicate"),arguments.length>1&&(t=arguments[1]);const r=this._generator();for(;!(n=r.next()).done;)if(e.call(t,n.value))return!0;return!1}every(e){let t,n;i(this,"this"),o(e,"predicate"),l(e,"predicate"),arguments.length>1&&(t=arguments[1]);const r=this._generator();for(;!(n=r.next()).done;)if(!e.call(t,n.value))return!1;return!0}takeWhile(e){let t,n;o(e,"predicate"),l(e,"predicate"),arguments.length>1&&(t=arguments[1]);const r=this._generator();return new c((function*(){for(;!(n=r.next()).done&&e.call(t,n.value);)yield n.value}))}}function s(e){return new c(e)}function a(){return new c}return c.empty=a,c.from=s,c.of=function(...e){return new c(e)},c.prototype.take=function(e){if(i(this,"this"),u(e,"count"),0===e)return a();let t;const n=this._generator();return s((function*(){for(let r=0;r<e;r+=1)t=n.next(),t.done||(yield t.value)}))},c.prototype.map=function(e){i(this,"this"),o(e,"callback"),l(e,"callback");let t,n=0;arguments.length>1&&(t=arguments[1]);const r=this._generator();return s((function*(){let i=r.next();for(;!i.done;)yield e.call(t,i.value,n),i=r.next(),n+=1}))},c}));
